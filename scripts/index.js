const util = require("util");
const {
  readdir,
  readFile,
  writeFile,
  watch,
  unlink,
  rm,
  mkdir,
} = require("fs/promises");
const copy = util.promisify(require("fs-extra").copy);
const { compress } = require("compress-images/promise");
const { minify: htmlminify } = require("html-minifier");
const { minify: cssminify } = require("csso");
const { minify: jsminify } = require("uglify-js");

const isDevelopment = process.argv[3] === "--development";

const options = {
  includeAutoGeneratedTags: true,
  removeAttributeQuotes: true,
  removeComments: true,
  removeRedundantAttributes: true,
  removeScriptTypeAttributes: true,
  removeStyleLinkTypeAttributes: true,
  sortClassName: true,
  useShortDoctype: true,
  collapseWhitespace: true,
};

const main = async () => {
  const products = require("./xlsx-reader").getProducts(`src/xlsx/products.xlsx`);
  const news = require("./xlsx-reader").getNews(`src/xlsx/news.xlsx`);
  const companies = require("./xlsx-reader").getNews(`src/xlsx/companies.xlsx`);

  const files = [];
  const processDir = async (dirname) => {
    try {
      const items = await readdir(dirname, { withFileTypes: true });
      for (const item of items) {
        if (item.isDirectory()) {
          await processDir(`${dirname}/${item.name}`);
        } else {
          files.push(`${dirname}/${item.name}`);
        }
      }
    } catch (err) { }
  };

  const productTemplate = await readFile(`src/product.html`);

  await rm("dist/*", { recursive: true, force: true });
  await mkdir("dist/products", { recursive: true });
  await copy("src", "dist", { overwrite: true });
  await unlink("dist/product.html");
  await rm("dist/xlsx", { recursive: true, force: true });

  await processDir(`dist`);
  let htmlFiles = files.filter((file) => file.match(/\.html$/gm));
  let cssFiles = files.filter((file) => file.match(/\.css$/gm));
  let jsFiles = files.filter((file) => file.match(/\.js$/gm));
  let newsImgFiles = files.filter((file) =>
    file.match(/dist\/assets\/images\/news\/.*(\.png|\.jpg|\.jpeg)$/gm)
  );
  let galleryImgFiles = files.filter((file) =>
    file.match(/dist\/assets\/images\/media\/images\/.*(\.png|\.jpg|\.jpeg)$/gm)
  );
  let galleryVidFiles = files.map((file) => [file.match(/dist\/assets\/images\/media\/videos\/.*(\.mp4|\.mov|\.avi)$/gm) || (file.match(/dist\/assets\/images\/media\/videos\//gm) && !file.match(/dist\/assets\/images\/media\/videos\/.*(\.mp4|\.mov|\.avi|\.png|\.jpg|\.jpeg)$/gm)) ? file : "", file.match(/dist\/assets\/images\/media\/videos\//gm) && !file.match(/dist\/assets\/images\/media\/videos\/.*(\.mp4|\.mov|\.avi|\.png|\.jpg|\.jpeg)$/gm)]
  ).filter(([file]) => file !== "");
  let galleryVidThumbnailFiles = files.filter((file) =>
    file.match(/dist\/assets\/images\/media\/videos\/.*(\.png|\.jpg|\.jpeg)$/gm)
  );
  let portfolioImgFiles = files.filter((file) =>
    file.match(/dist\/assets\/images\/scroller\/.*(\.png|\.jpg|\.jpeg)$/gm)
  );
  let brandImgFiles = files.filter((file) =>
    file.match(/dist\/assets\/images\/brands\/.*(\.png|\.jpg|\.jpeg)$/gm)
  );
  let companyImgFiles = files.filter((file) =>
    file.match(/dist\/assets\/images\/companies\/.*(\.png|\.jpg|\.jpeg|\.svg)$/gm)
  );
  if (!isDevelopment && process.argv[2] !== "--no-image-compress") {
    await rm("dist/assets/images", { recursive: true, force: true });
    await mkdir("dist/assets/images", { recursive: true });
  }

  for (let i = 0; i < htmlFiles.length; i++) {
    let data = await readFile(htmlFiles[i]);
    data = data
      .toString()
      .replace(
        "{{portfolio}}",
        portfolioImgFiles
          .map((portfolio) => {
            let portfolioName = portfolio
              .split("/")
            [portfolio.split("/").length - 1].split(".")[0]
              .toLowerCase()
              .split("-")
              .slice(1)
              .map((el) => el.charAt(0).toUpperCase() + el.slice(1))
              .join(" ");
            return `<div class="item_pos col-lg-12">	
        <div class="witr_single_pslide">	
          <div class="witr_pslide_image">
            <img src="assets/images/scroller/${portfolio.split("/")[portfolio.split("/").length - 1]
              }" alt="">
          </div>
          <div class="witr_content_pslide_text">
            <div class="witr_content_pslide">
              <h3>${portfolioName}</h3>
            </div>
          </div>	
        </div> 
      </div>`;
          })
          .join("\n")
      )
      .replace(
        "{{companies}}",
        companies.map(({ Company, Contact, Email, Website }, i) => {
          return `<div class="col-lg-4 col-md-6 col-sm-12">
          <div class="all_feature_color single_feature2">            
            <div class="witr_feature2">					
              <div class="witr_fea2_icon_top row align-items-center pb-2">
                <div class="col-md-2">
                  <img src="assets/images/companies/${companyImgFiles[i].split("/")[companyImgFiles[i].split("/").length - 1]
            }" alt="">		
                </div>
                <div class="col-md-10">
                  <h3>${Company}</h3>
                </div>
              </div>
              ${Contact.split("\n").map((el) => `<p><b>${el.split(":")[0]} : </b>${el.split(":")[1]}</p>`).join("\n")}
              <p><b>Email : </b>${Email}</p>
              <p><b>Website : </b><a href="${Website}">${Website}</a></p>			
            </div> 	   
          </div>
        </div>`;
        }).join("\n")
      )
      .replace("{{news}}", news.map(({ Pic, Title, Description, Tag, Date: date }) => {
        let image = newsImgFiles.find(
          (image) => /(.*)(\.png|\.jpg|\.jpeg)$/gm.exec(image.split("/")[image.split("/").length - 1])[1] === Pic
        );
        date = date.toString().split(" ").slice(0, 4)
        return `<div class="witr_all_mb_30 col-lg-12 ">
					<div class="busi_singleBlog">
						<div class="witr_sb_thumb">
							<img src="assets/images/news/${image ? image.split("/")[image.split("/").length - 1] : "default.jpg"}" alt="" >
						</div>	
						<div class="all_blog_color">	
							<div class="witr_blog_con bs5">									
								<h2>${Title}</h2>
								<div class="holder">
									<div class="ticker">
										${Description.split("\n").map((el) => `<p>${el}</p>`).join("\n")}
									</div>
								</div>
								<div class="witr_blog_border"></div>
								<span><i class="icofont-tags"></i> ${Tag}</span>
								<span><i class="icofont-ui-clock"></i> ${date[0]}, ${date[1]} ${date[2]}, ${date[3]}</span>
							</div>
						</div>
					</div>
				</div>`
      }).join("\n"))
      .replace(
        "{{brands}}",
        brandImgFiles
          .map(
            (brand) =>
              `<div class="slide_items">
            <img src="assets/images/brands/${brand.split("/")[brand.split("/").length - 1]
              }" alt=""/>
          </div>`
          )
          .join("\n")
      )
      .replace(
        "{{gallery-images}}",
        galleryImgFiles
          .map((gallery) => {
            let filterClass = gallery.split("/")[gallery.split("/").length - 2];
            return `<div class="col-lg-6 grid-item col-md-6 col-sm-12 ${filterClass.split("-")[1].toLowerCase()} witr_all_mb_30">
        <div class="single_protfolio">
          <div class="prot_thumb">
            <img src="assets/images/media/images/${filterClass}/${gallery.split("/")[gallery.split("/").length - 1]
              }" alt="" >							
            <div class="prot_content em_port_content ">
              <div class="prot_content_inner">
                <div class="picon">
                  <a class="portfolio-icon venobox vbox-item" data-gall="myportfolio" href="assets/images/media/images/${filterClass}/${gallery.split("/")[gallery.split("/").length - 1]
              }"><i class="fas fa-arrows-alt"></i></a>
                </div>
              </div>	
            </div>		
          </div>				
        </div>
      </div>`;
          })
          .join("\n")
      )
      .replace(
        "{{gallery-tabs}}",
        Array.from(
          new Set(
            galleryImgFiles.map((gallery) => {
              let filterClass = gallery
                .split("/")
              [gallery.split("/").length - 2].split("-")[1].toLowerCase();
              return filterClass;
            })
          )
        )
          .map(
            (filterClass, idx) =>
              `<li ${idx === 0 ? 'class="current_menu_item"' : ""
              } data-filter=".${filterClass}">${filterClass}</li>`
          )
          .join("\n")
      )
      .replace(
        "{{video-tabs}}",
        Array.from(
          new Set(
            galleryVidFiles.map(([gallery]) => {
              let filterClass = gallery
                .split("/")
              [gallery.split("/").length - 2].split("-")[1].toLowerCase();
              return filterClass;
            })
          )
        )
          .map(
            (filterClass, idx) =>
              `<li ${idx === 0 ? 'class="current_menu_item"' : ""
              } data-filter=".${filterClass}">${filterClass}</li>`
          )
          .join("\n")
      )
      .replace(
        "{{gallery-videos}}",
        galleryVidFiles
          .map(([gallery, isYoutube]) => {
            let filterClass = gallery.split("/")[gallery.split("/").length - 2];
            let thumbnail = !isYoutube && galleryVidThumbnailFiles.find(
              (thumbnail) =>
                /(.*)(\.png|\.jpg|\.jpeg)$/gm.exec(thumbnail)[1] ===
                /(.*)(\.mp4|\.mov|\.avi)$/gm.exec(gallery)[1]
            );
            if (!isYoutube && !thumbnail)
              thumbnail = galleryVidThumbnailFiles.find((thumbnail) =>
                thumbnail.match(
                  new RegExp(filterClass + "/default(.png|.jpg|.jpeg)$", "gm")
                )
              );
            return `<div class="col-lg-6 grid-item col-md-6 col-sm-12 ${filterClass.split("-")[1].toLowerCase()} witr_all_mb_30">
        <div class="single_protfolio">
          <div class="prot_thumb">
            ${isYoutube ?
                `<iframe width="100%" height="400px" frameborder="0" allowfullscreen src="https://www.youtube.com/embed/${gallery.split("/")[gallery.split("/").length - 1].split("-")[1]}"></iframe>` :
                `<video width="100%" height="400px" controls preload="auto" ${thumbnail
                  ? `poster="assets/images/media/videos/${filterClass}/${thumbnail.split("/")[thumbnail.split("/").length - 1]
                  }"`
                  : ""
                } style="object-fit: cover;">
              <source src="assets/images/media/videos/${filterClass}/${gallery.split("/")[gallery.split("/").length - 1]
                }"type="video/mp4">
            </video>`}
          </div>				
        </div>
      </div>`;
          }).join("\n"));
    if (isDevelopment) {
      await writeFile(htmlFiles[i], data, { encoding: "utf8" });
    } else {
      await writeFile(htmlFiles[i], htmlminify(data, options), {
        encoding: "utf8",
      });
    }
  }

  for (let i = 0; i < cssFiles.length; i++) {
    const data = await readFile(cssFiles[i]);
    if (isDevelopment) {
      await writeFile(cssFiles[i], data.toString(), {
        encoding: "utf8",
      });
    } else {
      await writeFile(cssFiles[i], cssminify(data.toString()).css, {
        encoding: "utf8",
      });
    }
  }

  for (let i = 0; i < jsFiles.length; i++) {
    const data = await readFile(jsFiles[i]);
    if (isDevelopment) {
      await writeFile(jsFiles[i], data.toString(), {
        encoding: "utf8",
      });
    } else {
      await writeFile(jsFiles[i], jsminify(data.toString()).code, {
        encoding: "utf8",
      });
    }
  }

  if (!isDevelopment && process.argv[2] !== "--no-image-compress") {
    await compress({
      source: `src/assets/images/**/*.{jpg,JPG,jpeg,JPEG,png,svg}`,
      destination: `dist/assets/images/`,
      // compression : 0 - 100
      enginesSetup: {
        // jpg: { engine: "mozjpeg", command: ["-quality", "60"] },
        // png: { engine: "pngquant", command: ["--quality=20-50", "-o"] },
        jpg: { engine: "mozjpeg", command: ["-quality", "20"] },
        png: { engine: "pngquant", command: ["--quality=30-50", "-o"] },
        svg: { engine: "svgo", command: "--multipass" },
        gif: {
          engine: "gifsicle",
          command: ["--colors", "64", "--use-col=web"],
        },
      },
    });

    await rm("log", { recursive: true, force: true });
  }

  let index = await readFile("dist/index.html");
  index = index.toString().replace(
    /\{\{products\}\}/gm,
    Object.keys(products)
      .map((key) => {
        if (products[key].length > 0 && products[key][0].name === undefined) {
          return `<li><a onClick="load('products/${key
            .toLowerCase()
            .replace(" ", "-")}.html');">${key}</a></li>`;
        } else {
          return `<li class="menu-item-has-children">
            <a>${key}</a>
            <ul class="sub-menu">
                ${products[key]
              .map(
                ({ name }) =>
                  `<li><a onClick="load('products/${name
                    .toLowerCase()
                    .replace(" ", "-")}.html');">${name}</a></li>`
              )
              .join("\n")}
            </ul>
        </li>`;
        }
      })
      .join("\n")
  );

  if (isDevelopment) {
    await writeFile("dist/index.html", index, { encoding: "utf8" });
  } else {
    await writeFile("dist/index.html", htmlminify(index, options), {
      encoding: "utf8",
    });
  }

  let contact = await readFile("dist/contact.html");
  contact = contact.toString().replace(
    /\{\{products\}\}/gm,
    Object.keys(products)
      .map((key) =>
        products[key].length > 0 && products[key][0].name === undefined
          ? key
          : products[key].map(({ name }) => `${name} - ${key}`).join(",")
      )
      .join(",")
  );

  if (isDevelopment) {
    await writeFile("dist/contact.html", contact, { encoding: "utf8" });
  } else {
    await writeFile("dist/contact.html", htmlminify(contact, options), {
      encoding: "utf8",
    });
  }

  let productsHtml = await readFile("dist/products.html");
  productsHtml = productsHtml.toString().replace(
    /\{\{products\}\}/gm,
    Object.keys(products)
      .map((key) => {
        if (products[key].length > 0 && products[key][0].name === undefined) {
          return `<div class="col-lg-4 col-md-6 col-sm-12">
          <div class="em-team all_color_team ">
            <div class="em-team-one">	
              <div class="em-team-content-image-inner" onClick="load('products/${key
              .toLowerCase()
              .replace(" ", "-")}.html');">	
                <div class="em-team-content-image">
                  <img src="${products[key][0]["images"][0]}" alt="">
                </div>	
              </div>
              <div class="em-team-content-waraper all_content_bg_color">
                <div class="em-team-content-title-inner">
                  <div class="em-content-title">
                    <h5><a>${key}</a></h5>
                  </div>
                </div>
                <div class="em-team-content-subtitle-inner">
                  <div class="em-content-subtitle">
                    <span>&nbsp;</span>
                  </div>
                </div>
                <div class="em-team-content-socials-inner">		
                    <a class="round-black-btn" onclick="localStorage.setItem('productName', '${key}'); load('contact.html');"><i class="fas fa-phone-alt"></i> &nbsp;Enquire Now</a>			
                </div>							
              </div>
            </div>
          </div>
        </div>`;
        } else {
          return products[key]
            .map(
              ({ name, images }) =>
                `<div class="col-lg-4 col-md-6 col-sm-12">
                      <div class="em-team all_color_team ">
                        <div class="em-team-one">	
                          <div class="em-team-content-image-inner" onClick="load('products/${name
                  .toLowerCase()
                  .replace(" ", "-")}.html');">	
                            <div class="em-team-content-image">
                              <img src="${images[0]}" alt="">
                            </div>	
                          </div>
                          <div class="em-team-content-waraper all_content_bg_color">
                            <div class="em-team-content-title-inner">
                              <div class="em-content-title">
                                <h5><a>${name}</a></h5>
                              </div>
                            </div>
                            <div class="em-team-content-subtitle-inner">
                              <div class="em-content-subtitle">
                                <span>${key}</span>
                              </div>
                            </div>
                            <div class="em-team-content-socials-inner">		
                                <a class="round-red-btn" onclick="localStorage.setItem('productName', '${name} - ${key}'); load('contact.html');"><i class="fas fa-phone-alt"></i> &nbsp;Enquire Now</a>			
                            </div>							
                          </div>
                        </div>
                      </div>
                    </div>`
            )
            .join("\n");
        }
      })
      .join("\n")
  );

  if (isDevelopment) {
    await writeFile("dist/products.html", productsHtml, { encoding: "utf8" });
  } else {
    await writeFile("dist/products.html", htmlminify(productsHtml, options), {
      encoding: "utf8",
    });
  }

  await Object.keys(products).map(async (key) => {
    await products[key].map(
      async ({
        name,
        specifications,
        specificationType,
        specificationOrder,
        description,
        list,
        images,
      }) => {
        let _productTemplate = productTemplate.toString();
        _productTemplate = _productTemplate
          .replaceAll(
            "{{name}}",
            products[key].length > 0 && products[key][0].name === undefined
              ? key
              : name
          )
          .replaceAll(
            "{{product-name}}",
            products[key].length > 0 && products[key][0].name === undefined
              ? key
              : `${name} - ${key}`
          )
          .replace("{{description}}", [`<h6>${description[0]}</h6>`, ...description.slice(1).map(desc => `<p>${desc}</p>`)].join("\n"));
        let listHead = list.splice(0, 1)
        let mid = list.length / 2;
        let listHtml = new Array(
          list.length > 13
            ? list.length + 3
            : list.length + 2
        );
        if (list.length > 13) {
          listHtml[0] = `<div class="col-md-6"><h6>${listHead}</h6>`;
          listHtml[
            mid + 1
          ] = `</div><div class="col-md-6"><h6><br/></h6>`;
        } else {
          listHtml[0] = `<div class="col-md-12"><h6>${listHead}</h6>`;
        }
        listHtml[listHtml.length - 1] = `</div>`;
        if (list.length > 13) {
          for (let i = 0; i < list.length / 2; i++) {
            listHtml[i + 1] = `<li><p>${list[i]}</p></li>`;

            if (list[mid + 1]) {
              if (list.length > 13) {
                listHtml[mid + i + 2] = `<li><p>${list[mid + i]
                  }</p></li>`;
              }
            }
          }
        } else {
          for (let i = 0; i < list.length; i++) {
            listHtml[i + 1] = `<li><p>${list[i]}</p></li>`;
          }
        }
        _productTemplate = _productTemplate.replace(
          "{{list}}",
          listHtml.join("\n")
        );
        _productTemplate = _productTemplate.replace(
          "{{specifications-type}}",
          specificationType
        );
        _productTemplate = _productTemplate.replace(
          "{{specifications-header}}",
          specificationOrder
            .map((spec) => `<th scope="col">${specifications[0][spec]}</th>`)
            .join("\n")
        );
        _productTemplate = _productTemplate.replace(
          "{{specifications-body}}",
          specifications
            .slice(1)
            .map((specification) => {
              return `<tr>
                ${specificationOrder
                  .map((spec) => {
                    if (spec === "TC1")
                      return `<th scope="row">${specification[spec]}</th>`;
                    else return `<td>${specification[spec]}</td>`;
                  })
                  .join("\n")}
              </tr>`;
            })
            .join("\n")
        );
        _productTemplate = _productTemplate.replace(
          /\{\{images-showcase\}\}/gm,
          images
            .map(
              (image) => `<div class="swiper-slide">
                <img src="${image}" alt="">
            </div>`
            )
            .join("\n")
        );
        _productTemplate = _productTemplate.replace(
          /\{\{images-select\}\}/gm,
          images
            .map(
              (image) =>
                `<div class="swiper-slide">
               <img src="${image}" alt="">
              </div>`
            )
            .join("\n")
        );

        if (isDevelopment) {
          if (products[key].length > 0 && products[key][0].name === undefined) {
            await writeFile(
              `dist/products/${key.toLowerCase().replace(" ", "-")}.html`,
              _productTemplate,
              { encoding: "utf8" }
            );
          } else {
            await writeFile(
              `dist/products/${name.toLowerCase().replace(" ", "-")}.html`,
              _productTemplate,
              { encoding: "utf8" }
            );
          }
        } else {
          if (products[key].length > 0 && products[key][0].name === undefined) {
            await writeFile(
              `dist/products/${key.toLowerCase().replace(" ", "-")}.html`,
              htmlminify(_productTemplate, options),
              { encoding: "utf8" }
            );
          } else {
            await writeFile(
              `dist/products/${name.toLowerCase().replace(" ", "-")}.html`,
              htmlminify(_productTemplate, options),
              { encoding: "utf8" }
            );
          }
        }
      }
    );
  });
};

(async () => {
  try {
    await main();
    if (process.argv[2] === "--watch") {
      const watcher = watch(`src`, { recursive: true });
      for await (const event of watcher) {
        console.log(event);
        await main();
      }
    }
  } catch (err) {
    if (err.name === "AbortError") return;
    throw err;
  }
})();
